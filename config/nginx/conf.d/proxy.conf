# Определение для проверки JSON
map $http_content_type $is_json {
    default                     0;
    "application/json"          1;
    "application/json; charset=utf-8" 1;
}

# Определение для проверки XML
map $http_content_type $is_xml {
    default                     0;
    "application/xml"           1;
    "text/xml"                  1;
    "application/xml; charset=utf-8" 1;
    "text/xml; charset=utf-8"   1;
}

# Сервер для проксирования запросов из omega в psi
server {
    listen 80;
    server_name omega-to-psi.local;

    # Логирование
    access_log logs/omega-to-psi-access.log main;
    error_log logs/omega-to-psi-error.log;

    # Проверка JSON и XML
    location / {
        # Проверка JSON
        if ($is_json) {
            set $json_validation 1;
        }

        # Проверка XML
        if ($is_xml) {
            set $xml_validation 1;
        }

        # Если это JSON, проверяем его
        if ($json_validation) {
            rewrite_by_lua_block {
                local cjson = require "cjson"
                local body = ngx.req.get_body_data()
                
                if body then
                    local success, json_data = pcall(cjson.decode, body)
                    if not success then
                        ngx.status = 400
                        ngx.say("Invalid JSON format")
                        return ngx.exit(400)
                    end
                end
            }
        }

        # Если это XML, проверяем его
        if ($xml_validation) {
            rewrite_by_lua_block {
                local xml2lua = require "xml2lua"
                local body = ngx.req.get_body_data()
                
                if body then
                    local handler = xml2lua.createParser()
                    local success, err = pcall(handler.parse, handler, body)
                    if not success then
                        ngx.status = 400
                        ngx.say("Invalid XML format")
                        return ngx.exit(400)
                    end
                end
            }
        }

        # Проксирование запроса в сегмент psi
        proxy_pass https://psi-k8s:6443;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Сервер для проксирования запросов из psi в omega
server {
    listen 80;
    server_name psi-to-omega.local;

    # Логирование
    access_log logs/psi-to-omega-access.log main;
    error_log logs/psi-to-omega-error.log;

    # Проверка JSON и XML
    location / {
        # Проверка JSON
        if ($is_json) {
            set $json_validation 1;
        }

        # Проверка XML
        if ($is_xml) {
            set $xml_validation 1;
        }

        # Если это JSON, проверяем его
        if ($json_validation) {
            rewrite_by_lua_block {
                local cjson = require "cjson"
                local body = ngx.req.get_body_data()
                
                if body then
                    local success, json_data = pcall(cjson.decode, body)
                    if not success then
                        ngx.status = 400
                        ngx.say("Invalid JSON format")
                        return ngx.exit(400)
                    end
                end
            }
        }

        # Если это XML, проверяем его
        if ($xml_validation) {
            rewrite_by_lua_block {
                local xml2lua = require "xml2lua"
                local body = ngx.req.get_body_data()
                
                if body then
                    local handler = xml2lua.createParser()
                    local success, err = pcall(handler.parse, handler, body)
                    if not success then
                        ngx.status = 400
                        ngx.say("Invalid XML format")
                        return ngx.exit(400)
                    end
                end
            }
        }

        # Проксирование запроса в сегмент omega
        proxy_pass https://omega-k8s:6443;
        proxy_ssl_verify off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
} 